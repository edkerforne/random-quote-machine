{"version":3,"sources":["App.js","Quotes.js","serviceWorker.js","index.js"],"names":["Share","props","id","className","title","href","text","author","icon","faTwitter","faTumblr","NewQuote","onClick","colors","quotes","quote","Quote","setColor","color","Math","floor","random","length","setState","getNewQuote","fading","handleClick","fadeIn","window","setTimeout","clearTimeout","componentDidMount","callback","url","req","XMLHttpRequest","open","addEventListener","status","responseText","console","error","statusText","responseURL","send","getAllQuotes","res","JSON","parse","state","bind","this","faQuoteLeft","target","rel","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e42cfec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTwitter, faTumblr } from \"@fortawesome/free-brands-svg-icons\";\n\nimport { getAllQuotes } from \"./Quotes.js\";\n\nconst myWebsite = \"https://edkerforne.github.io/\";\nconst homepage = \"https://edkerforne.github.io/random-quote-machine/\";\n\nconst Share = props => {\n  return (\n    <div id=\"share\">\n      <a\n        className=\"icon\"\n        title=\"Tweet this quote!\"\n        href={`https://twitter.com/intent/tweet?text=\"${props.text}\" - ${props.author}&url=${homepage}&hashtags=quotes`}\n      >\n        <FontAwesomeIcon icon={faTwitter} />\n      </a>\n\n      <a\n        className=\"icon\"\n        title=\"Post this quote on Tumblr!\"\n        href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&content=${props.text}&caption=${props.author}&canonicalUrl=https://edkerforne.github.io/random-quote-machine&shareSource=tumblr_share_button`}\n      >\n        <FontAwesomeIcon icon={faTumblr} />\n      </a>\n    </div>\n  );\n};\n\nconst NewQuote = props => {\n  return (\n    <button onClick={props.onClick} id=\"new-quote\">\n      New Quote\n    </button>\n  );\n};\n\nconst colors = [\n  \"black\",\n  \"brown\",\n  \"red\",\n  \"orange\",\n  \"green\",\n  \"teal\",\n  \"blue\",\n  \"purple\"\n];\n\nlet quotes = [];\nlet quote = {};\n\nclass Quote extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      author: \"\",\n      color: \"black\"\n    };\n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  /* Choose the background and text color\n   * randomly from an array\n   */\n  setColor = () => {\n    let color = colors[Math.floor(Math.random() * colors.length)];\n    this.setState({ color });\n  };\n\n  /* Get a random quote and display it\n   * on button click\n   */\n  getNewQuote = () => {\n    quote = quotes[Math.floor(Math.random() * quotes.length)];\n    let author = quote.author ? quote.author : \"Anonymous\";\n    this.setState({\n      text: quote.text,\n      author: author,\n      fading: true\n    });\n  };\n\n  handleClick = () => {\n    // Make the quote area disappear\n    this.setState({ fading: true });\n    const fadeIn = window.setTimeout(() => {\n      // After 250ms, display a new quote\n      this.getNewQuote();\n      this.setState({ fading: false });\n      window.clearTimeout(fadeIn);\n    }, 250);\n\n    // Change the theme color\n    this.setColor();\n  };\n\n  /* Component gets a random quote on load,\n   * same as clicking the button\n   */\n  componentDidMount = () => {\n    getAllQuotes(res => {\n      quotes = JSON.parse(res);\n      this.handleClick();\n    });\n  };\n\n  render() {\n    return (\n      <main id=\"page-wrapper\" className={this.state.color + \"-theme\"}>\n        <div id=\"quote-box\">\n          <div\n            id=\"quote\"\n            className={this.state.fading ? \"fade-out\" : \"fade-in\"}\n          >\n            <FontAwesomeIcon id=\"large-quote\" icon={faQuoteLeft} />\n            <p id=\"text\">{this.state.text}</p>\n            <p id=\"author\">{this.state.author}</p>\n          </div>\n          <footer id=\"buttons\">\n            <NewQuote onClick={this.handleClick} />\n            <Share text={this.state.text} author={this.state.author} />\n          </footer>\n        </div>\n        <footer id=\"footer\">\n          by{\" \"}\n          <a href={myWebsite} target=\"_blank\" rel=\"noopener noreferrer\">\n            Edwin Kerforne\n          </a>\n        </footer>\n      </main>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return <Quote />;\n  }\n}\n\nexport default App;\n","/* Requests all quotes from the API and\r\n * invokes a callback function on success\r\n */\r\nexport const getAllQuotes = callback => {\r\n  const url = \"https://type.fit/api/quotes\";\r\n\r\n  let req = new XMLHttpRequest();\r\n  req.open(\"GET\", url);\r\n  req.addEventListener(\"load\", () => {\r\n    if (req.status >= 200 && req.status < 400) {\r\n      callback(req.responseText);\r\n    } else {\r\n      console.error(`${req.status} ${req.statusText} ${req.responseURL}`);\r\n    }\r\n  });\r\n  req.addEventListener(\"error\", () => {\r\n    console.error(`Network error with URL ${url}`);\r\n  });\r\n  req.send(null);\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}